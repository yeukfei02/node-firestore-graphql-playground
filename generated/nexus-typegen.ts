/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */

declare global {
  type NexusGen = NexusGenTypes;
}

export interface NexusGenInputs {
  Login: {
    // input type
    email: string; // String!
    password: string; // String!
  };
  Signup: {
    // input type
    email: string; // String!
    name: string; // String!
    password: string; // String!
  };
  UpdateUser: {
    // input type
    email: string; // String!
    name: string; // String!
    password: string; // String!
  };
}

export interface NexusGenEnums {}

export interface NexusGenScalars {
  String: string;
  Int: number;
  Float: number;
  Boolean: boolean;
  ID: string;
}

export interface NexusGenObjects {
  DeleteUserResult: {
    // root type
    message: string; // String!
  };
  LoginResult: {
    // root type
    message: string; // String!
    token: string; // String!
  };
  Mutation: {};
  Query: {};
  SignupResult: {
    // root type
    message: string; // String!
  };
  UpdateUserResult: {
    // root type
    message: string; // String!
  };
  User: {
    // root type
    createdAt: string; // String!
    email: string; // String!
    id: string; // ID!
    name: string; // String!
    password: string; // String!
    updatedAt: string; // String!
  };
}

export interface NexusGenInterfaces {}

export interface NexusGenUnions {}

export type NexusGenRootTypes = NexusGenObjects;

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars;

export interface NexusGenFieldTypes {
  DeleteUserResult: {
    // field return type
    message: string; // String!
  };
  LoginResult: {
    // field return type
    message: string; // String!
    token: string; // String!
  };
  Mutation: {
    // field return type
    deleteUser: NexusGenRootTypes['DeleteUserResult']; // DeleteUserResult!
    login: NexusGenRootTypes['LoginResult']; // LoginResult!
    signup: NexusGenRootTypes['SignupResult']; // SignupResult!
    updateUser: NexusGenRootTypes['UpdateUserResult']; // UpdateUserResult!
  };
  Query: {
    // field return type
    user: NexusGenRootTypes['User']; // User!
    users: NexusGenRootTypes['User'][]; // [User!]!
  };
  SignupResult: {
    // field return type
    message: string; // String!
  };
  UpdateUserResult: {
    // field return type
    message: string; // String!
  };
  User: {
    // field return type
    createdAt: string; // String!
    email: string; // String!
    id: string; // ID!
    name: string; // String!
    password: string; // String!
    updatedAt: string; // String!
  };
}

export interface NexusGenFieldTypeNames {
  DeleteUserResult: {
    // field return type name
    message: 'String';
  };
  LoginResult: {
    // field return type name
    message: 'String';
    token: 'String';
  };
  Mutation: {
    // field return type name
    deleteUser: 'DeleteUserResult';
    login: 'LoginResult';
    signup: 'SignupResult';
    updateUser: 'UpdateUserResult';
  };
  Query: {
    // field return type name
    user: 'User';
    users: 'User';
  };
  SignupResult: {
    // field return type name
    message: 'String';
  };
  UpdateUserResult: {
    // field return type name
    message: 'String';
  };
  User: {
    // field return type name
    createdAt: 'String';
    email: 'String';
    id: 'ID';
    name: 'String';
    password: 'String';
    updatedAt: 'String';
  };
}

export interface NexusGenArgTypes {
  Mutation: {
    deleteUser: {
      // args
      id: string; // ID!
    };
    login: {
      // args
      data: NexusGenInputs['Login']; // Login!
    };
    signup: {
      // args
      data: NexusGenInputs['Signup']; // Signup!
    };
    updateUser: {
      // args
      data: NexusGenInputs['UpdateUser']; // UpdateUser!
      id: string; // ID!
    };
  };
  Query: {
    user: {
      // args
      id: string; // ID!
    };
  };
}

export interface NexusGenAbstractTypeMembers {}

export interface NexusGenTypeInterfaces {}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false;
    resolveType: true;
    __typename: false;
  };
};

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes:
    | NexusGenTypes['objectNames']
    | NexusGenTypes['enumNames']
    | NexusGenTypes['unionNames']
    | NexusGenTypes['interfaceNames']
    | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes'];
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}

declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {}
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {}
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {}
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {}
  interface NexusGenPluginSchemaConfig {}
  interface NexusGenPluginArgConfig {}
}
